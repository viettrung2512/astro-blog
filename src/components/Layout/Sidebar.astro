---
const currentPath = Astro.url.pathname;

const navigationItems = [
  {
    href: "/history",
    label: "History",
    icon: "M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z",
    description: "Your reading history",
    badge: null
  },
  {
    href: "/tags",
    label: "All Tags",
    icon: "M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z",
    description: "Browse by topics",
    badge: "120+"
  },
  {
    href: "/popularblog",
    label: "Popular Blog",
    icon: "M13 10V3L4 14h7v7l9-11h-7z",
    description: "Trending articles",
    badge: "Hot"
  },
  {
    href: "/authors",
    label: "All Authors",
    icon: "M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z",
    description: "Discover writers",
    badge: "500+"
  },
  {
    href: "/articles",
    label: "All Articles",
    icon: "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z",
    description: "Complete collection",
    badge: "1.2K+"
  }
];

const quickActions = [
  {
    href: "/bookmarks",
    label: "Bookmarks",
    icon: "M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z",
    count: "24"
  },
  {
    href: "/drafts",
    label: "Drafts",
    icon: "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z",
    count: "3"
  },
  {
    href: "/following",
    label: "Following",
    icon: "M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z",
    count: "42"
  }
];
---

<aside class="sticky top-0 h-screen">
  <!-- Main Sidebar Container -->
  <div class="h-full bg-white/80 backdrop-blur-xl border-r border-gray-200/50 shadow-xl">
    <!-- Decorative Background Elements -->
    <div class="absolute top-0 right-0 w-32 h-32 bg-gradient-to-bl from-blue-400/10 to-purple-600/10 rounded-full blur-3xl opacity-60"></div>
    <div class="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-emerald-400/10 to-cyan-500/10 rounded-full blur-2xl opacity-60"></div>
    
    <div class="relative z-10 h-full flex flex-col p-6">
      <!-- Header Section -->
      <div class="mb-8">
        <div class="flex items-center space-x-3 mb-2">
          <div class="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
          </div>
          <div>
            <h2 class="text-lg font-bold text-gray-900">TechPeople</h2>
            <p class="text-xs text-gray-500">Explore content</p>
          </div>
        </div>
      </div>

      <!-- Main Navigation -->
      <nav class="flex-1 space-y-2">
        <div class="mb-6">
          <h3 class="text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3 px-3">Main Menu</h3>
          <ul class="space-y-1">
            {navigationItems.map((item) => (
              <li>
                <a 
                  href={item.href}
                  class={`group relative flex items-center px-4 py-3.5 rounded-2xl transition-all duration-300 hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 hover:shadow-md hover:scale-[1.02] ${
                    currentPath === item.href 
                      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg transform scale-[1.02]' 
                      : 'text-gray-700 hover:text-gray-900'
                  }`}
                >
                  {/* Background Glow Effect */}
                  <div class={`absolute inset-0 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 ${
                    currentPath === item.href ? 'opacity-100' : ''
                  }`} style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.1));"></div>
                  
                  {/* Icon */}
                  <div class={`relative flex-shrink-0 w-6 h-6 mr-4 transition-transform duration-300 group-hover:scale-110 ${
                    currentPath === item.href ? 'text-white' : 'text-gray-500 group-hover:text-blue-600'
                  }`}>
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" class="w-full h-full">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={item.icon}></path>
                    </svg>
                  </div>
                  
                  {/* Content */}
                  <div class="relative flex-1 min-w-0">
                    <div class="flex items-center justify-between">
                      <div>
                        <p class={`font-semibold text-sm truncate ${
                          currentPath === item.href ? 'text-white' : 'text-gray-900 group-hover:text-gray-900'
                        }`}>
                          {item.label}
                        </p>
                        <p class={`text-xs truncate mt-0.5 ${
                          currentPath === item.href ? 'text-blue-100' : 'text-gray-500 group-hover:text-gray-600'
                        }`}>
                          {item.description}
                        </p>
                      </div>
                      
                      {/* Badge */}
                      {item.badge && (
                        <span class={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ml-2 ${
                          currentPath === item.href 
                            ? 'bg-white/20 text-white' 
                            : item.badge === 'Hot' 
                              ? 'bg-red-100 text-red-700 group-hover:bg-red-200' 
                              : 'bg-blue-100 text-blue-700 group-hover:bg-blue-200'
                        }`}>
                          {item.badge}
                        </span>
                      )}
                    </div>
                  </div>
                  
                  {/* Active Indicator */}
                  {currentPath === item.href && (
                    <div class="absolute right-2 top-1/2 transform -translate-y-1/2 w-2 h-2 bg-white rounded-full shadow-lg animate-pulse"></div>
                  )}
                </a>
              </li>
            ))}
          </ul>
        </div>

        <!-- Quick Actions Section -->
        <div class="pt-6 border-t border-gray-200/50">
          <h3 class="text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3 px-3">Quick Actions</h3>
          <ul class="space-y-1">
            {quickActions.map((action) => (
              <li>
                <a 
                  href={action.href}
                  class="group flex items-center justify-between px-4 py-2.5 rounded-xl text-gray-600 hover:text-gray-900 hover:bg-gray-50 transition-all duration-200 hover:scale-[1.01]"
                >
                  <div class="flex items-center space-x-3">
                    <div class="w-5 h-5 text-gray-400 group-hover:text-blue-600 transition-colors duration-200">
                      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" class="w-full h-full">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={action.icon}></path>
                      </svg>
                    </div>
                    <span class="text-sm font-medium">{action.label}</span>
                  </div>
                  <span class="inline-flex items-center justify-center w-6 h-6 text-xs font-bold text-gray-500 bg-gray-100 rounded-full group-hover:bg-blue-100 group-hover:text-blue-700 transition-colors duration-200">
                    {action.count}
                  </span>
                </a>
              </li>
            ))}
          </ul>
        </div>
      </nav>

      <!-- Bottom Section -->
      <div class="mt-auto pt-6 border-t border-gray-200/50">
        <!-- Stats Card -->
        <div class="bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-4 mb-4 border border-blue-100/50">
          <div class="flex items-center space-x-3">
            <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl flex items-center justify-center">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
            </div>
            <div>
              <p class="text-sm font-bold text-gray-900">Reading Stats</p>
              <p class="text-xs text-gray-600">47 articles this month</p>
            </div>
          </div>
          <div class="mt-3 flex items-center justify-between text-xs">
            <span class="text-gray-600">Progress</span>
            <span class="font-semibold text-blue-600">78%</span>
          </div>
          <div class="mt-1 w-full bg-gray-200 rounded-full h-2">
            <div class="bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-500" style="width: 78%"></div>
          </div>
        </div>

        <!-- Help Button -->
        <button class="w-full flex items-center justify-center px-4 py-3 bg-gray-50 hover:bg-gray-100 rounded-xl text-gray-600 hover:text-gray-900 transition-all duration-200 hover:scale-[1.01] group">
          <svg class="w-5 h-5 mr-2 group-hover:rotate-12 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span class="text-sm font-medium">Help & Support</span>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Overlay (for responsive design) -->
  <div class="lg:hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-40 opacity-0 pointer-events-none transition-opacity duration-300" id="sidebar-overlay"></div>
</aside>

<style>
  /* Custom animations */
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .animate-slide-in {
    animation: slideIn 0.3s ease-out;
  }

  /* Hover effects */
  .group:hover .group-hover\:rotate-12 {
    transform: rotate(12deg);
  }

  .group:hover .group-hover\:scale-110 {
    transform: scale(1.1);
  }

  /* Smooth transitions */
  * {
    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
  }

  /* Custom scrollbar for sidebar */
  aside::-webkit-scrollbar {
    width: 4px;
  }

  aside::-webkit-scrollbar-track {
    background: transparent;
  }

  aside::-webkit-scrollbar-thumb {
    background: rgba(156, 163, 175, 0.3);
    border-radius: 2px;
  }

  aside::-webkit-scrollbar-thumb:hover {
    background: rgba(156, 163, 175, 0.5);
  }
</style>

<script>
  // Add interactive functionality
  document.addEventListener('DOMContentLoaded', function() {
    // Add staggered animation to navigation items
    const navItems = document.querySelectorAll('nav li') as NodeListOf<HTMLElement>;
    navItems.forEach((item, index) => {
      item.style.animationDelay = `${index * 0.1}s`;
      item.classList.add('animate-slide-in');
    });

    // Add ripple effect to buttons
    const buttons = document.querySelectorAll('a, button') as NodeListOf<HTMLElement>;
    buttons.forEach(button => {
      button.addEventListener('click', (e: MouseEvent) => {
        const ripple = document.createElement('span');
        const target = e.currentTarget as HTMLElement;
        const rect = target.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        const x = e.clientX - rect.left - size / 2;
        const y = e.clientY - rect.top - size / 2;
        
        ripple.style.width = ripple.style.height = size + 'px';
        ripple.style.left = x + 'px';
        ripple.style.top = y + 'px';
        ripple.classList.add('ripple');
        
        target.appendChild(ripple);
        
        setTimeout(() => {
          ripple.remove();
        }, 600);
      });
    });
  });
</script>

<style>
  /* Ripple effect */
  .ripple {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    transform: scale(0);
    animation: ripple-animation 0.6s linear;
    pointer-events: none;
  }

  @keyframes ripple-animation {
    to {
      transform: scale(4);
      opacity: 0;
    }
  }
</style>
